/* 마이크로서비스 환경에서 데이터 일관성 유지하기 */

/* 마이크로서비스 환경에서는 각 서비스가 자체 데이터베이스를 가지고 있어 
 * 분산 트랜잭션 처리가 중요한 문제가 됩니다.
 * 이 예시에서는 주문 서비스(OrderService)와 재고 서비스(InventoryService)간의
 * 데이터 일관성을 유지하기 위한 Saga 패턴 구현을 보여줍니다.
 */

// 분산 트랜잭션을 위한 Saga 패턴 흐름도
// [클라이언트] -> [주문 서비스] -> [주문 이벤트 발행] -> [재고 서비스] -> [결과 이벤트 발행] -> [주문 서비스]

//============== 테스트 시나리오 ==============

// 1. 정상 주문 처리 흐름
// 1) 클라이언트가 주문 생성 API 호출
POST /api/orders
{
  "productId": "PRODUCT-1",
  "quantity": 5,
  "price": 10000
}

// 2) 주문 서비스가 주문 생성 후 ORDER_CREATED 이벤트 발행
// 3) 재고 서비스가 이벤트 수신 및 재고 확인/감소 처리
// 4) 재고 서비스가 INVENTORY_CONFIRMED 이벤트 발행
// 5) 주문 서비스가 이벤트 수신 및 주문 상태 COMPLETED로 업데이트


// 2. 재고 부족으로 인한 주문 실패 흐름
// 1) 클라이언트가 주문 생성 API 호출 (재고가 부족한 상품)
POST /api/orders
{
  "productId": "PRODUCT-4",
  "quantity": 5,
  "price": 10000
}

// 2) 주문 서비스가 주문 생성 후 ORDER_CREATED 이벤트 발행
// 3) 재고 서비스가 이벤트 수신 및 재고 부족 확인
// 4) 재고 서비스가 INVENTORY_REJECTED 이벤트 발행
// 5) 주문 서비스가 이벤트 수신 및 주문 상태 CANCELLED로 업데이트
